zstyle ':completion:*' auto-description 'specifying %d'
zstyle ':completion:*' completer _expand _complete _ignored _correct _approximate
zstyle ':completion:*' expand prefix suffix
zstyle ':completion:*' file-sort access
zstyle ':completion:*' format 'completing %d'
zstyle ':completion:*' group-name ''
zstyle ':completion:*' ignore-parents parent pwd .. directory
zstyle ':completion:*' insert-unambiguous false
zstyle ':completion:*' list-colors ''
zstyle ':completion:*' list-prompt %SAt %p: Hit TAB for more, or the character to insert%s
zstyle ':completion:*' list-suffixes true
zstyle ':completion:*' matcher-list 'm:{[:lower:]}={[:upper:]}' 'r:|[._-]=** r:|=**' 'l:|=* r:|=*'
zstyle ':completion:*' menu select=3
zstyle ':completion:*' original false
zstyle ':completion:*' preserve-prefix '//[^/]##/'
zstyle ':completion:*' select-prompt %SScrolling active: current selection at %p%s
zstyle ':completion:*' verbose true
zstyle :compinstall filename "$HOME/.zshrc"

autoload -Uz compinit
compinit

HISTFILE=~/.histfile
HISTSIZE=1000
SAVEHIST=1000
setopt autocd notify
unsetopt beep extendedglob nomatch
bindkey -v


alias ls='ls -vh --group-directories-first'
alias l='ls -Hl'
alias ll='l -a'
alias help='man'

alias -g ...='../..'
alias -g ....='../../..'
alias -g .....='../../../..'

alias neovide='WINIT_UNIX_BACKEND=x11 neovide --multigrid --novsync'
alias nvide='neovide'
alias sqlite='sqlite3 -box'

alias R='R --quiet'
alias evcxr='evcxr --edit-mode vi'
alias pypy='pypy3 -q'
alias mpv='mpv --hwdec=auto'
alias scrcpy='scrcpy --max-fps 60'
alias wine-python='WINEPREFIX=~/gen/wineprefixes/python wine py'
alias rslog='adb logcat RustStdoutStderr:D *:S'
alias bctl='brightnessctl --exponent'
alias sshfs='sshfs -o reconnect,idmap=user,max_conns=16,ServerAliveInterval=20'

alias cr='cargo run'
alias crr='cargo run --release'
alias cb='cargo build'
alias cbr='cargo build --release'
alias ca='cargo apk'
alias cw='cargo watch -c'
alias ct='cargo test'
alias ch='cargo check'
alias cl='cargo clippy'
alias clp='cargo clippy -- -Wclippy::pedantic'
alias cf='cargo fmt'
alias cfg='CARGO_PROFILE_RELEASE_DEBUG=true cargo flamegraph --palette aqua'
alias docs='cargo doc && firefox -p view-docs file://$(pwd)/target/doc/help.html &disown'
alias rdocs='firefox -p view-docs file:///home/multisn8/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/share/doc/rust/html/std/index.html &disown'
alias rrrr='rr replay -d rust-gdb'

alias todo='edit ~/gen/notes/todo.md'
alias docx2pdf='libreoffice --headless --convert-to pdf'

export EDITOR="$HOME/info/path/edit"
export GIT_EDITOR='nvim'
export GPG_TTY="$(tty)"

export XDG_CURRENT_DESKTOP='sway'
export SDL_VIDEODRIVER='wayland'
export SDL_AUDIODRIVER='pipewire'
export QT_QPA_PLATFORM='wayland'
export QT_WAYLAND_DISABLE_WINDOWDECORATION=1
export ECORE_EVAS_ENGINE='wayland_egl'
export ELM_ENGINE='wayland_egl'
export ELM_DISPLAY='wl'
export MOZ_ENABLE_WAYLAND=1
export QT_QPA_PLATFORMTHEME='qt5ct'

export LIBVA_DRIVER_NAME='iHD'

export DOTNET_CLI_TELEMETRY_OPTOUT=1
export WINEARCH='win64'
export STEAM_COMPAT_CLIENT_INSTALL_PATH="$HOME/.steam"
export PROTON_USER_COMPAT_DATA=1
export GDK_SCALE=2
export _JAVA_AWT_WM_NONREPARENTING=1
unset _JAVA_OPTIONS

stty start undef
stty stop undef
stty lnext undef

bydir() {
	dir="$(basename $(pwd))"
	touch $dir$1
}
mkcd() {
	mkdir -p $@ && cd $@
}
cwm() {
	crate="$(cargo cratename)"
	cargo watch -cx "expand --bin $crate $@"
}
ce() {
	output=$(mktemp)
	cargo expand --color never $@ >$output
	edit -R "+set ft=rust" $output
}
manual-repeat() {
	while do
		clear
		$@
		read -q
	done
}
cdpl() {
	cd "$HOME/info/playground/$@"
}

man() {
	/usr/bin/env man $@ | nvim +Man!
}
journalctl() {
	/usr/bin/journalctl $@ | nvim '+set ft=log' -R
}

CONFIGDIR="${XDG_CONFIG_HOME:-$HOME/.config}/zsh"
mkprojdir() {
	mkdir -p $CONFIGDIR
	echo $(pwd) > "$CONFIGDIR/projdir"
}
cdpr() {
	if [[ -e "$CONFIGDIR/projdir" ]]; then
		cd $(cat "$CONFIGDIR/projdir")
	else
		echo 'No project directory set. Use mkprojdir to set your cwd as one'
	fi
}

# wrapper for nix-shell to make it launch zsh and cause less friction in my workflow
nix-shell() {
	SHELL_NAME="${SHELL_NAME:+SHELL_NAME/}$@" \
		command nix-shell $@ \
			--command "SHELL=$(command which zsh) exec $(command which zsh) -i"
}
shell() {
	ALL_SHELLDEFS_PATH="$HOME/system/configs/nix/shells"

	if [[ -z $1 ]]; then
		# either recursion of multiple args complete or no args given
		return
	fi

	if [[ ! -d "$ALL_SHELLDEFS_PATH/$1" ]]; then
		echo "shell definition path '$1' not found"
		return
	fi

	if [[ -z $2 ]]; then
		# finally launch zsh
		inner_cmd="SHELL=$(command which zsh) exec $(command which zsh) -i"
	else
		# recurse further to handle rest of the given shells
		inner_cmd="exec $(command which zsh) -ic \"$funcstack[1] $argv[2,-1]\""
	fi

	before=$(pwd)
	cd "$ALL_SHELLDEFS_PATH/$1"

	# no magic variable, just set here for the prompt below
	# **do note this doesn't know of standalone nix-shells**
	SHELL_NAME="${SHELL_NAME:+$SHELL_NAME/}$1" \
		command nix-shell --command "cd $before; $inner_cmd"

	cd $before
}

TIME_LEFT=$(time-left)

setopt prompt_subst
PROMPT=' %5F%(!.#.$)%f '
RPROMPT='%2F%~%f %6F%D{%T}%f ${SHELL_NAME:+using %1F${SHELL_NAME}%f }${TIME_LEFT:+left %5F${TIME_LEFT}%f }on %3F%M%f %(?..%B%3F%?%f%b)'

eval "$(zoxide init zsh --cmd cd)"
