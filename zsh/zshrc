zstyle ':completion:*' auto-description 'specifying %d'
zstyle ':completion:*' completer _expand _complete _ignored _correct _approximate
zstyle ':completion:*' expand prefix suffix
zstyle ':completion:*' file-sort access
zstyle ':completion:*' format 'completing %d'
zstyle ':completion:*' group-name ''
zstyle ':completion:*' ignore-parents parent pwd .. directory
zstyle ':completion:*' insert-unambiguous false
zstyle ':completion:*' list-colors ''
zstyle ':completion:*' list-prompt %SAt %p: Hit TAB for more, or the character to insert%s
zstyle ':completion:*' list-suffixes true
zstyle ':completion:*' matcher-list 'm:{[:lower:]}={[:upper:]}' 'r:|[._-]=** r:|=**' 'l:|=* r:|=*'
zstyle ':completion:*' menu select=3
zstyle ':completion:*' original false
zstyle ':completion:*' preserve-prefix '//[^/]##/'
zstyle ':completion:*' select-prompt %SScrolling active: current selection at %p%s
zstyle ':completion:*' verbose true
zstyle :compinstall filename "$HOME/.zshrc"

autoload -Uz compinit
compinit

HISTFILE=~/.histfile
HISTSIZE=1000
SAVEHIST=1000
setopt autocd notify
unsetopt beep extendedglob nomatch
bindkey -v


alias ls='ls --group-directories-first -th --color=auto'
alias l='ls -Hl'
alias ll='l -a'

alias -g ...='../..'
alias -g ....='../../..'
alias -g .....='../../../..'

alias neovide='neovide --multigrid'
alias nvide='neovide'
alias sqlite='sqlite3 -box'

alias R='R --quiet'
alias evcxr='evcxr --edit-mode vi --opt 2'
alias pypy='pypy3 -q'
alias mpv='mpv --hwdec=auto'
alias scrcpy='scrcpy --max-fps 60'

alias cr='cargo run'
alias crr='cargo run --release'
alias cb='cargo build'
alias cbr='cargo build --release'
alias cw='cargo watch -c'
alias ct='cargo test'
alias ch='cargo check'
alias ce='cargo expand --bin $(cargo cratename)'
alias cfg='CARGO_PROFILE_RELEASE_DEBUG=true cargo flamegraph --palette aqua'
alias docs='cargo doc --open'
alias rrrr='rr replay -d rust-gdb'

alias todo='edit ~/gen/notes/todo.md'
alias docx2pdf='libreoffice --headless --convert-to pdf'

export EDITOR="$HOME/info/path/edit"
export GIT_EDITOR='nvim'
export MANPAGER='nvim +Man!'
export GPG_TTY="$(tty)"

export XDG_CURRENT_DESKTOP='sway'
export SDL_VIDEODRIVER='wayland'
export SDL_AUDIODRIVER='pipewire'
export QT_QPA_PLATFORM='wayland'
export QT_WAYLAND_DISABLE_WINDOWDECORATION=1
export ECORE_EVAS_ENGINE='wayland_egl'
export ELM_ENGINE='wayland_egl'
export ELM_DISPLAY='wl'
export MOZ_ENABLE_WAYLAND=1
export QT_QPA_PLATFORMTHEME='qt5ct'

export LIBVA_DRIVER_NAME='iHD'

export RUST_BACKTRACE=1
export DOTNET_CLI_TELEMETRY_OPTOUT=1
export WINEARCH='win64'
export STEAM_COMPAT_CLIENT_INSTALL_PATH="$HOME/.steam"
export PROTON_USER_COMPAT_DATA=1
export GDK_SCALE=2
export _JAVA_AWT_WM_NONREPARENTING=1
unset _JAVA_OPTIONS

stty start undef
stty stop undef
stty lnext undef

bydir() {
	dir="$(basename $(pwd))"
	touch $dir$1
}
cwm() {
	crate="$(cargo cratename)"
	cargo watch -cx "expand --bin $crate $@"
}
manual-repeat() {
	while do
		clear
		$@
		read -q
	done
}
cdpl() {
	cd "$HOME/info/playground/$@"
}

# taken and shortened from https://github.com/jarun/nnn/blob/master/misc/quitcd/quitcd.bash_zsh
nn() {
	export NNN_TMPFILE="${XDG_CONFIG_HOME:-$HOME/.config}/nnn/.lastd"
	nnn -edx "$@"
	if [ -f "$NNN_TMPFILE" ]; then
		source "$NNN_TMPFILE"
		rm -f "$NNN_TMPFILE" > /dev/null
	fi
}

man() {
	/usr/bin/env man $@ | nvim +Man!
}
journalctl() {
	/usr/bin/journalctl $@ | nvim '+set ft=log' -R
}

CONFIGDIR="${XDG_CONFIG_HOME:-$HOME/.config}/zsh"
mkprojdir() {
	mkdir -p $CONFIGDIR
	echo $(pwd) > "$CONFIGDIR/projdir"
}
cdproj() {
	if [[ -e "$CONFIGDIR/projdir" ]]; then
		cd $(cat "$CONFIGDIR/projdir")
	else
		echo 'No project directory set. Use mkprojdir to set your cwd as one'
	fi
}

PROMPT=' %F{5}%(!.#.$)%f '
RPROMPT='%F{6}%~%f %F{4}%D{%T}%f %(?..%B%F{3}%?%f%b)'

