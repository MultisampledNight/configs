zstyle ':completion:*' completer _complete _ignored _correct _approximate _prefix
zstyle ':completion:*' expand prefix suffix
zstyle ':completion:*' file-sort name
zstyle ':completion:*' group-name ''
zstyle ':completion:*' ignore-parents parent pwd
zstyle ':completion:*' insert-unambiguous false
zstyle ':completion:*' list-colors ''
zstyle ':completion:*' list-suffixes true
zstyle ':completion:*' matcher-list '+m:{[:lower:][:upper:]}={[:upper:][:lower:]}' '+r:|[._-]=** r:|=**'
zstyle ':completion:*' max-errors 3
zstyle ':completion:*' menu select=1
zstyle ':completion:*' original false
zstyle ':completion:*' preserve-prefix '//[^/]##/'
zstyle ':completion:*' verbose true

autoload -Uz compinit
compinit

HISTFILE=~/.histfile
HISTSIZE=1000
SAVEHIST=1000
setopt notify
unsetopt autocd beep extendedglob nomatch
bindkey -v

stty start undef
stty stop undef
stty lnext undef

path=("$HOME/zukunftslosigkeit/scripts" $path)
export PATH

export ALL_SHELLDEFS_PATH="$HOME/zukunftslosigkeit/shells"
export NIX_PATH="$NIX_PATH:$ALL_SHELLDEFS_PATH"

export PAGER='hx'

# see also https://grml.org/zsh/zsh-lovers.html
rationalise-dot() {
  if [[ $LBUFFER = *.. ]]; then
    LBUFFER+=/..
  else
    LBUFFER+=.
  fi
}
zle -N rationalise-dot
bindkey . rationalise-dot

alias evcxr='evcxr --edit-mode vi'
alias nv='neovide'
alias wh='wormhole-rs'
alias sqlite='sqlite3 -box'
alias rsync='rsync --progress --compress'

alias cr='cargo run'
alias crr='cargo run --release'
alias cb='cargo build'
alias cbr='cargo build --release'
alias ch='cargo check'
alias cl='cargo clippy'
alias clp='cargo clippy -- -Wclippy::pedantic'
alias cw='cargo watch -c'
alias cf='cargo fmt'
alias cbe='cargo bench'
alias ct='cargo nextest'
alias docs='cargo doc --open'
alias cm='cargo miri'
alias ca='cargo apk'
alias cfg='CARGO_PROFILE_RELEASE_DEBUG=true cargo flamegraph'

man() {
  if [[ ! -n $1 ]]; then
	echo "which manual page do you want?"
	return 1
  fi

  nv -- -c "Man $*" -c only
}

bydir() {
	dir="$(basename $(pwd))"
	touch $dir$1
}

# wrapper for nix-shell to make it launch zsh and cause less friction in my workflow
nix-shell() {
	command nix-shell $@ \
		--command "SHELL=$(command which zsh) exec $(command which zsh) -i"
}
shell() {
	inner_cmd="SHELL=$(command which zsh) "
	if [[ -z $1 ]]; then
		# no args given and nothing to do by "default"
		return
	fi

	if [[ ! -d "$ALL_SHELLDEFS_PATH/$1" ]]; then
		echo "shell definition path '$1' not found"
		return
	fi

	if [[ -z $2 ]]; then
		# finally launch zsh
		inner_cmd="SHELL=$(command which zsh) exec $(command which zsh) -i"
	else
		# recurse further to handle rest of the given shells
		inner_cmd="exec $(command which zsh) -ic \"$funcstack[1] $argv[2,-1]\""
	fi

	before=$(pwd)
	cd "$ALL_SHELLDEFS_PATH/$1"

	command nix-shell --command "cd $before; $inner_cmd"

	cd $before
}

pwd-as-title() {
	print -nP '\e]2;%~\a'
}
chpwd_functions+=("pwd-as-title")
print -nP '\e]2;%~\a'

setopt prompt_subst
if [[ -z "$TIME_LEFT" ]]; then
	TIME_LEFT=$(time-left)
fi
RPROMPT+='${TIME_LEFT:+ >${TIME_LEFT}}${SHELL_NAME:+ %2F\$${SHELL_NAME}%f}'

eval "$(direnv hook zsh)"
