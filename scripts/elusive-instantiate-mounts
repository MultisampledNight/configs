#!/usr/bin/env nix-shell
#!nix-shell -i python3 -p python3
# vim: ft=python
import argparse
import shlex
import subprocess
import sys
import time
from dataclasses import dataclass
from enum import Enum
from pathlib import Path
from typing import Iterator, Iterable


USER = "multisn8"
MOUNTS_PATH = f"/home/{USER}/zukunftslosigkeit/configs/nixos/elusive/mounts"
QEMU_PROJECT_PATH_NAME = "opt/elusive/project_path"


def main():
    args = parse_args()
    mounts = parse_mounts(args.mounts)

    result = args.callback(args, mounts)
    sys.stdout.write(result)
    sys.stdout.flush()


def parse_args():
    parser = argparse.ArgumentParser()
    parser.add_argument("--mounts", default=MOUNTS_PATH)

    subparsers = parser.add_subparsers(required=True)

    parser_host_serve = subparsers.add_parser("host-serve")
    parser_host_serve.add_argument("project_path")
    parser_host_serve.set_defaults(callback=host_serve)

    parser_host_cfg = subparsers.add_parser("host-qemu-cfg")
    parser_host_cfg.add_argument("project_path")
    parser_host_cfg.set_defaults(callback=host_cfg)

    parser_guest_mount = subparsers.add_parser("guest-mount")
    parser_guest_mount.set_defaults(callback=guest_mount)

    return parser.parse_args()


def host_serve(args, mounts) -> str:
    run_serve_cmds(args.project_path, mounts)
    return ""


def host_cfg(args, _mounts) -> str:
    return shlex.join(format_qemu_args(args.project_path))


def guest_mount(args, mounts) -> str:
    return "\n".join(format_as_mount_cmds(mounts)) + "\n"


class Access(Enum):
    ReadOnly = 1
    ReadWrite = 2

    def parse(source: str):
        match source:
            case "ro":
                return Access.ReadOnly
            case "rw":
                return Access.ReadWrite


@dataclass
class Mount:
    access: Access
    source: str
    target: str

    def parse(line: str):
        parts = line.split()
        if len(parts) == 2:
            # source = target
            parts.append(parts[-1])

        return Mount(
            access=Access.parse(parts[0]),
            source=parts[1],
            target=parts[2],
        )


def parse_mounts(mounts_path=MOUNTS_PATH) -> Iterator[Mount]:
    def should_ignore_line(line: str) -> bool:
        line = line.strip()
        return line.startswith("#") or not line

    lines = Path(mounts_path).read_text().splitlines()
    relevant_lines = filter(lambda line: not should_ignore_line(line), lines)

    return map(
        Mount.parse,
        relevant_lines,
    )


def run_serve_cmds(project_path: str, mounts: Iterable[Mount]):
    mounts = list(mounts)
    readonly = (mount for mount in mounts if mount.access == Access.ReadOnly)
    readwrite = (mount for mount in mounts if mount.access == Access.ReadWrite)

    readonly_cmd = single_rclone_serve_instance(project_path, readonly)
    readwrite_cmd = single_rclone_serve_instance(project_path, readwrite)

    readonly_cmd += ["--addr", "localhost:50021", "--read-only"]
    readwrite_cmd += ["--addr", "localhost:50020"]

    # explicitly leaking for the moment
    # probably a pidfile or the like would be better
    subprocess.Popen(readonly_cmd)
    subprocess.Popen(readwrite_cmd)


def single_rclone_serve_instance(
    project_path: str, mounts: Iterable[Mount]
) -> list[str]:
    cmd = ["rclone", "serve", "sftp", "/", "--no-auth", "--copy-links"]
    for mount in mounts:
        cmd += ["--filter", f"+ {expand(mount.source, project_path)}"]
    cmd += ["--filter", "- **"]

    return cmd


def format_qemu_args(project_path: str) -> list[str]:
    return [
        "-nic",
        ",".join(
            [
                "user",
                "restrict=off",
                "hostfwd=tcp::50022-:22",
            ]
        ),
        "-fw_cfg",
        f"name={QEMU_PROJECT_PATH_NAME},string={expand_user(project_path)}",
    ]


def format_as_mount_cmds(mounts) -> list[str]:
    # TODO
    return []


def expand(path, project_path: str, user=USER):
    return expand_user(expand_project_path(path, project_path), user)


def expand_user(path: str, user=USER):
    return path.replace("~", f"/home/{user}")


def expand_project_path(path: str, project_path: str):
    return path.replace("$project_path", project_path)


if __name__ == "__main__":
    main()
